   
List is a child interface of collection.

If we want to represent a group of individual objects as a single entity where duplicates are allowed and insertion order must be preserved the we should go for LIST Interface.

We can preserve insertion order with Index and we can differentiate duplicate objects by using Index of List. Hence index will play very important role in List Interface.

List interface defines the following Methods:

L.add(3, "A")                                  // Add an object at 3 index
L.add(int index , Object o) ;            // Add an object in a collection at given index.
L.addAll(int Index , collection c) ;        // Add group of individuals in a collection .

remove("A") ;
Object remove(int index ) ;
Object get(int index) ;
Object set(int index , Object o) ;
Int indexOf(Object obj) ;                     // First index occurrence
Int lastIndexOf(Object o) ;                 // last index occurrence

If we want List elements one by one , then we should call listIterator() method.
ListIterator listIterator() ;

List interface implementation classes:
1.ArrayList  
2.LinkedList 
3.Vector  ->  4. Stack (child of stack class)


-----------------------------------------------------  Implementation classes  ------------------------------------------------------------------------------
1. ARRAYLIST 
	1. The underline DS is Re-sizeable Array or growable array.
	2. Duplicates are allowed.
	3. Insertion order is preserved.
	4. Heterogenous objects are allowed(Except TreeSet and TreeMap every where Heterogenous objects are  not allowed).
	5. Null insertion is possible . // l.add(null) ;

Constructors:
1.ArrrayList l = new ArrayList() ; 
// this will by default create an empty  ArrayList object  with default initial capacity of 10.
Once ArrayList reaches it's max capacity then a new ArrayList object will be created  with :

New Capacity = (Current capacity * 3/2) + 1  ; 
 next time size will be 16 

2.ArrayList  l = new ArrayList(int initialcapacity );
Creates an empty ArrayList Object with specified initial capacity.

3.ArrayList  l  =  new ArrayList(Collection c) ;
Creates an equivalent ArrayList object for the given collection.  

NOTE: Usually we can use collection to hold and transfer objects from one location to another location(container)
to provide support for these requirements every collection class by default implements Serializable and Cloneable interfaces.

ArrayList and Vector classes implements RandomAccess interface so that any random element we can access with same speed.

RandomAccess(I): This is present in java.util package and it does not contains any methods in it.
It is a marker interface, where the required ability will be provided automatically by the JVM.
Only ArrayList and Vector classes implements it.


ArrayList is the best choice if our frequent operation is Retrieval operation(because ArrayList implements RandomAccess interface).
ArrayList is the worst choice if our frequent operation is insertion or deletion in the middle.

For insertion and deletion operation always go for LinkedList.

How to get synchronized version of ArrayList Object?
By default ArrayList is non-synchronized but we can get synchronized version of ArrayList object by using synchorizedList() method  of Collections class.

Public static List synchronizedList(List l) 

ArrayList  L = new ArrayList() ;
List  L1  = Collections.synchronizedList(L) ;
L is non-synchronized where as  L1 is synchronized.



2. LINKEDLIST :
1.The underlying DS is doubly linked list 
2.Insertion order is preserved
3.Duplicate objects are allowed.
4.Heterogenous objects are allowed.
5.null insertion is possible.
6.LinkedList implements Serializable and Cloneable interfaces but not RandomAccess interface.
7.LinkedList is the best choice is our frequent operation is Insertion or deletion in the middle.
8.LinkedList is the worst choice is our frequent operation is Retrieval operation.

Constructors:
1.LinkedList  l = new LinkedList() ; 
Creates an empty LinkedList object 

2.LinkedList  l = new LinkedList(Collection c) ;
Creates an equivalent LinkedList Object for the given collection.

LinkedList class specific methods:
Usually we can use LinkedList to develop stacks and Queues to provide support for these requirements 

LinkedList class defines the following specific methods:
	1. Void addFirst(Object o) ;
	2. Void addLast(Object o) ;
	3. Object getFirst() ;
	4. Object getLast() ;
	5. Object removeFirst() ;
  6. Object removeLast() ;



3. VECTOR :
1.The underlying DS is Re-sizeable Array or growable array.
2.Insertion order is preserved.
3.Duplicates are allowed.
4.Heterogenous objects  are allowed.
5.null insertion is possible.
6.It implements Serializable Cloneable and RandomAccess interfaces.
7.Every method present in the vector is synchronized and hence Vector object is Thread  safe.

Constructor: 
1.Vector  v = new Vector() ;
Creates an empty vector object with default initial capacity of 10, once vector reaches it's max capacity then a new vector object will be created with 

New Capacity = current capacity * 2 ;

2.Vector  v = new Vector(int initialCapacity) ;
Creates an empty Vector object  with specified initial capacity.

3.Vector v = new Vector(int initialcapacity , int incrementalcapacity) ;

Vector v = new Vector(1000 , 5) ;

4.Vector v = new Vector(Collection c) ;
Creates an equivalent vector object for the given collection. This constructor is meant for inter conversion between collection objects.

Vector specific methods:
1.To add objects:
	1. add(Object o) ;             // in collection 
	2. add(int index, Object o);   // in List
	3. addElement(Object o) ;     // in Vector, method name are mostly of camel case and lengthy( Just like names of old and new people)

2.To remove objects:
	1. remove(Object o) ;              // collection
	2. removeElement(Object o) ;       // Vector
	3. remove(int index) ;             //List
	4. removeElementAt(int index) ;   //Vector
	5. clear();                       // collection
	6. removeAllElements() ;         // Vector

3.To get Objects:
	1. Object get(int index);                  //List
	2. Object elementAt(int index) ;   // vector
	3. Object firstElement();                 // Vector
	4. Object lastElement() ;                 // Vector

4.Other methods:
	1. Int size() ;
	2. Int capacity();
	3. Enumeration elements() ; // one by one elements form collection



4. STACK :
1.It is the child class of Vector class 
2.It is a specially designed class for LIFO order.

Constructor:
Stack   s  =  new Stack() ;

Stack specific Methods:
1.Object push(Object o); // to insert an object  into the stack
2.Object pop(); // to remove and return top of the stack
3.Object peek() ; // to return top of the stack without removal
4.boolean empty() ;  // returns true if stack is empty 
5.int search(Object o) ; // returns offset if the element is present otherwise returns -1. 

