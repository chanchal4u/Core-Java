
COLLECTION AND IT'S FRAMEWORK :

If we want to represent a group of individual objects as a single entity then we should go for Collection.

Collection framework: It contains several classes and interfaces which can be used to represent a group of individual object as a single entity.

9 Key Interfaces of Collection framework

1.Collection
2.List
3.Set  -->  4.SortedSet  -->  5.NavigableSet    (Set is the parent interface of Sorted and Navigable interface)
6.Queue
7.Map  -->  8.SortedMap  -->  9.NavigableMap    (Map is the parent interface of SortedMap and NavigableMap)

1. COLLECTION(I): if we want to  a group of individual objects as a single entity then we should go for Collection.
  -> Collection interface defines the most common methods which are applicable for any collection object.
  -> In general ,collection interface is considered as root interface of collection framework.
  -> There is no concrete class which implements collection interface directly only child interfaces can implement.
  
2. LIST(I): It is the child interface of Collection(I).
  -> If we want to represent a group of individual object as a single entity where duplicates are allowed and insertion order must be preserved then we should go for List interface. 
  -> Collection(I) -> List(I) -> (ArrayList, LinkedList, Vector, Stack) implementation class.
  
  -> Note: In 1.2 version Vector and Stack classes are Re-Engineered/modified to implement List interface.
  
3. SET(I): It is the child interface of collection interface,
  -> If we want to represent a group of individual objects  as a single entity where duplicates are not allowed and insertion order not required 
      then we should go for Set interface.
  -> Collection(I) -> Set(I) -> (HashSet , LinkedHashSet)  implementation class
 
4. SORTEDSET(I): It is the child interface of Set interface,
  -> If we want to represent a group of individual objects  as a single entity where duplicates are not allowed 
  and all objects should be inserted according to some sorting order , then we should go for SortedSet interface.

5. NavigableSet(I): It is the child interface of SortedSet interface, it contains several methods for navigation purposes.
Collection(I) -> Set(I) -> SortedSet(I)-> NavigableSet(I) -> TreeSet(class)

6.QUEUE(I): It is the child interface of collection interface.
  -> If we want to represent a group of individual objects prior to processing then we should go for Queue interface.
  -> Usually Queue follows FIFO order but based on our requirements we can implement our own priority order also .
  -> Ex: Before sending a mail, all mail ids we have to store them in some DS, in which order we added mail ids in the same order 
      only mail should be delivered for this requirement Queue is best choice.

Collection(I) -> Queue(I) -> (PriorityQueue, BlockingQueue -> (PriorityBlockingQueue, LinkedBlockingQueue) ) implementing classes.


Note: All the above interfaces (Collection,  List, SortedSet, NavigableSet and Queue) meant for representing a group of individual objects. 
If we want to represent a group of object as Key-Value pairs then  we should go for Map.


7. MAP(I): Map is not child interface of collection interface. 
  -> If we want to represent a group of object as Key-Value pairs then  we should go for Map.
  S.no(key)  	Name(value)
  101	        Ram
  102   	    Durga
  103	        Ravi

Note: Both key and value are Objects only, Duplicate KEYS are not allowed but VALUES can be duplicated.

Map(I) -> (HashMap ->LinkedHashMap , WeakHashMap , IdentityHashMap , (Dictionary: Abstract class) -> Hashtable -> Properties) implementing classes


8. SortedMap(I): It is the child interface of Map interface.
  -> If we want to represent a group of key-value pairs according to some sorting order of keys then we should go for SortedMap interface.
  -> In SortedMap the sorting is done on Key only but not based on value.

9. NavigableMap(I): It is the child interface of SortedMap. 
  -> It defines several methods for Navigation purposes.

Map(I) -> SortedMap(I) -> NavigableMap(I) -> TreeMap(C)	
