Every thread in java has some priority. It may be default priority generated by JVM or customized priority provided by programmer.

The valid range of thread priorities is 1 to 10  where 1 is MIN priority and  10 is MAX priority.

Thread class defines the following constants to represent some standard priority.
	1. Thread.MIN_PRIORITY : 1
	2. Thread.NORM_PRIORITY : 5
	3. Thread.MAX_PRIORITY : 10
	
Thread Scheduler will use priorities while allocating processor.
The thread which is having highest priority will get the chance first.
If two threads having same priority then we can't expect exact execution order , it depends on thread scheduler.

Thread class defines the following methods to get and set priority of a thread.

	1. public final int getPriority() 
	2. public final void setPriority(int P)  : allowed values range 1 to 10 , otherwise Runtime exception saying : IllegalArgumentException
	Ex:
	t.setPriority(7) ;
	t.setPriority(17) ;  IllegalArgumentException
	

Default priority:
The default priority only for the MAIN thread is 5 but for all remaining threads default priority  will be inherited from parent to child i.e. whatever priority parent thread has the same priority will be there for the child thread.
Parent thread is the thread which invokes the child thread execution.


Example:
public class ThreadDemo8 {

	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority());  // 5
		//Thread.currentThread().setPriority(16) ; will throw rnutime error
		// Exception in thread "main" java.lang.IllegalArgumentException
		//Thread.currentThread().setPriority(8) ;
		System.out.println(Thread.currentThread().getPriority());  // 8
		
		MyThread8 t = new MyThread8() ;
		//System.out.println(t.getPriority());  // 8
		// Here the main thread priority is set as 8 , and t is the child thread of main
		// child thread will have the same priority as the parent thread
		
		t.setPriority(10);
		System.out.println(t.getPriority());
		t.start();
		
		for(int i = 0; i < 3 ; i ++)
		{
			System.out.println("In MAIN thread");
		}
		
	}

}

class MyThread8 extends Thread 
{
	public void run()
	{
		for(int i = 0 ; i < 3 ; i ++)
		{
			System.out.println("Child thread");
			
		}
	}
}

Output:
5
5
10
In MAIN thread
In MAIN thread
In MAIN thread
Child thread
Child thread
Child thread

NOTE: Some platforms won't provide support for thread priorities.



